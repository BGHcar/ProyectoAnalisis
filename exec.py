# exec.py
import sys
from src.models.base.application import aplicacion
from src.main import iniciar

def main():
    
    iniciar()
    """Inicializar el aplicativo con an√°lisis geom√©trico."""
    
"""    # Configuraci√≥n de la aplicaci√≥n
    aplicacion.profiler_habilitado = True
    aplicacion.pagina_sample_network = "A"
    
    print("üöÄ SISTEMA DE AN√ÅLISIS GEOM√âTRICO DE BIPARTICIONES")
    print("=" * 60)
    
    # Determinar sistema candidato
    if len(sys.argv) > 1:
        sistema_candidato = sys.argv[1]
        print(f"üìã Sistema desde argumentos: {sistema_candidato}")
    else:
        # Sistema por defecto (puedes cambiarlo aqu√≠)
        sistema_candidato = "ABC"  # Cambia esto por el sistema que necesites
        print(f"üìã Sistema por defecto: {sistema_candidato}")
    
    print(f"üî¨ Variables: {len(sistema_candidato)}")
    print(f"‚è±Ô∏è Iniciando an√°lisis...")
    
    try:
        # Ejecutar an√°lisis
        resultado = iniciar(sistema_candidato)
        
        # Mostrar resumen r√°pido
        print(f"\nüéâ ¬°AN√ÅLISIS COMPLETADO EXITOSAMENTE!")
        print(f"üìä Total de an√°lisis realizados: {resultado.total}")
        print(f"üìÅ Resultados guardados en: {resultado.resultados.results_file}")
        
        # Estad√≠sticas r√°pidas
        geometry_exitosos = resultado.estadisticas['geometry_exitosos']
        geometry_errores = resultado.estadisticas['geometry_errores']
        
        if geometry_exitosos > 0:
            tiempo_promedio = resultado.estadisticas['tiempo_total_geometry'] / geometry_exitosos
            print(f"‚ö° Rendimiento Geometry: {geometry_exitosos} exitosos, {geometry_errores} errores")
            print(f"‚è±Ô∏è Tiempo promedio: {tiempo_promedio:.3f}s por an√°lisis")
        
    except Exception as e:
        print(f"‚ùå ERROR CR√çTICO: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1) """

if __name__ == "__main__":
    main()
